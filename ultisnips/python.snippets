# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet ipj "import pjoin" b
from os.path import join as pjoin
endsnippet

snippet logger "add logger" b
logging.basicConfig(format='[%(asctime)s] [%(process)d] [%(name)s:%(lineno)d] [%(levelname)s] %(message)s')
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
endsnippet

snippet snsjp "" b
import seaborn as sns
import japanize_matplotlib  # noqa: F401
sns.set(style='whitegrid', font='IPAexGothic')
endsnippet

snippet inp "" b
import numpy as np
endsnippet

snippet imp "" b
import matplotlib.pyplot as plt
endsnippet

snippet subplots "" b
fig, axs = plt.subplots(${1}, ${2}, figsize=(16, 9), sharex="col", sharey="row", tight_layout=True)
fig: plt.Figure
fig.suptitle("")
fig.savefig(pjoin(args.out, "out.pdf"))
endsnippet

snippet ax "" b
ax: plt.Axes
ax.set_xlabel("")
ax.set_ylabel("")
ax.set_title("")
endsnippet

snippet mkdir "" b
os.makedirs(args.out, exist_ok=True)
endsnippet

snippet savefig "" b
fig.savefig(pjoin(args.out, "$1"))
endsnippet

snippet log "" b
logger.info(f"{$1}")
endsnippet

snippet df_pool "" b
num_procs = min(4, multiprocessing.cpu_count())
chunk_size = int(iloc_df.shape[0] / num_procs)
chunks = [
    iloc_df.loc[iloc_df.index[i:i + chunk_size]]
    for i in range(0, iloc_df.shape[0], chunk_size)
]
pool = multiprocessing.Pool(processes=num_procs)
dfs = pool.map(run, chunks)
endsnippet

snippet mp "" b
pool = multiprocessing.Pool(processes=multiprocessing.cpu_count())
dfs = pool.map(proc, chunks)
endsnippet
